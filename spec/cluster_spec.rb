# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by chef-codegen and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'spec_helper'

# TODO(alexstephen): Reformat tests to use nested describe blocks
# TODO(alexstephen): Add title == name tests
# Test Matrix:
#
# +--------------------------------------------------------+
# | Action  | Exists | Changes | Success | Result          |
# +--------------------------------------------------------+
# | create  | Y      | Y       | Y       | Edit            |
# | create  | Y      | Y       | N       | Fail            |
# | create  | Y      | N       | Y       | Fetch (no-op)   |
# | create  | Y      | N       | N       | Fail            |
# | create  | N      | Y       | Y       | Create          |
# | create  | N      | Y       | N       | Fail            |
# +--------------------------------------------------------+
# | delete  | Y      | Y       | Y       | Delete          |
# | delete  | Y      | Y       | N       | Fail            |
# | delete  | N      | Y       | Y       | Fail (no delete)|
# | delete  | N      | Y       | N       | Fail            |
# +--------------------------------------------------------+
# TODO(alexstephen): Add tests for manage
# TODO(alexstephen): Add tests for modify
context 'gcontainer_cluster' do
  context 'ensure == present' do
    context 'resource exists' do
      # Ensure present: resource exists, no change
      context 'no changes == no action' do
        # Ensure present: resource exists, no change, no name
        context 'title == name' do
          # Ensure present: resource exists, no change, no name, pass
          context 'title == name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1, name: 'title0'
              expect_network_get_success 2, name: 'title1'
              expect_network_get_success 3, name: 'title2'
            end

            let(:runner) do
              # This path ensures that the current cookbook is
              # loaded for testing.
              # This path will load all other cookbooks in the
              # parent directory.
              # Under most circumstances, this will include the
              # real google-gauth cookbook.
              parent_dir = File.join(File.dirname(__FILE__), '..', '..')
              cookbook_paths = [parent_dir]

              # If there's no real version of the google-gauth ,
              # add in the mocked version so that the tests do not fail.
              # Since cookbooks can have any name, we assume that
              # any directory with the word auth is the google-gauth cookbook.
              if Dir.entries(parent_dir).select { |p| p.include? 'auth' }.empty?
                cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')
              end
              ChefSpec::SoloRunner.new(
                step_into: 'gcontainer_cluster',
                cookbook_path: cookbook_paths,
                platform: 'ubuntu',
                version: '16.04'
              )
            end

            let(:chef_run) do
              apply_recipe(
                <<-MANIFEST
                  gcontainer_cluster 'title0' do
                    action :create
                    addons_config({
                      horizontal_pod_autoscaling: {
                        disabled: true
                      },
                      http_load_balancing: {
                        disabled: true
                      }
                    })
                    cluster_ipv4_cidr 'test cluster_ipv4_cidr#0 data'
                    description 'test description#0 data'
                    initial_node_count 1911672831
                    location ['qq', 'rr', 'ss', 'tt']
                    logging_service 'logging.googleapis.com'
                    master_auth({
                      client_certificate: 'test client_certificate#0 data',
                      client_key: 'test client_key#0 data',
                      cluster_ca_certificate: 'test cluster_ca_certificate#0 data',
                      password: 'test password#0 data',
                      username: 'test username#0 data'
                    })
                    monitoring_service 'monitoring.googleapis.com'
                    network 'test network#0 data'
                    node_config({
                      disk_size_gb: 450092159,
                      image_type: 'test image_type#0 data',
                      labels: {
                        'test labels#1 data' => 'test labels#1 data',
                        'test labels#2 data' => 6131251034
                      },
                      local_ssd_count: 1751176017,
                      machine_type: 'test machine_type#0 data',
                      metadata: {
                        'test metadata#1 data' => 'test metadata#1 data',
                        'test metadata#2 data' => 2666715473,
                        'test metadata#3 data' => 'test metadata#3 data'
                      },
                      oauth_scopes: ['ww', 'xx', 'yy', 'zz'],
                      preemptible: true,
                      service_account: 'test service_account#0 data',
                      tags: ['mm', 'nn', 'oo', 'pp']
                    })
                    subnetwork 'test subnetwork#0 data'
                    zone 'test zone#0 data'
                    project 'test project#0 data'
                    credential 'mycred'
                  end

                  gcontainer_cluster 'title1' do
                    action :create
                    addons_config({
                      horizontal_pod_autoscaling: {
                        disabled: false
                      },
                      http_load_balancing: {
                        disabled: false
                      }
                    })
                    cluster_ipv4_cidr 'test cluster_ipv4_cidr#1 data'
                    description 'test description#1 data'
                    initial_node_count 3823345662
                    location ['jj', 'kk', 'll']
                    logging_service 'none'
                    master_auth({
                      client_certificate: 'test client_certificate#1 data',
                      client_key: 'test client_key#1 data',
                      cluster_ca_certificate: 'test cluster_ca_certificate#1 data',
                      password: 'test password#1 data',
                      username: 'test username#1 data'
                    })
                    monitoring_service 'none'
                    network 'test network#1 data'
                    node_config({
                      disk_size_gb: 900184319,
                      image_type: 'test image_type#1 data',
                      labels: {
                        'test labels#2 data' => 'test labels#2 data',
                        'test labels#3 data' => 8175001379,
                        'test labels#4 data' => 'test labels#4 data'
                      },
                      local_ssd_count: 3502352035,
                      machine_type: 'test machine_type#1 data',
                      metadata: {
                        'test metadata#2 data' => 'test metadata#2 data',
                        'test metadata#3 data' => 3555620630,
                        'test metadata#4 data' => 'test metadata#4 data',
                        'test metadata#5 data' => 5333430946,
                        'test metadata#6 data' => 'test metadata#6 data'
                      },
                      oauth_scopes: ['xx', 'yy', 'zz'],
                      preemptible: false,
                      service_account: 'test service_account#1 data',
                      tags: ['bb', 'cc', 'dd']
                    })
                    subnetwork 'test subnetwork#1 data'
                    zone 'test zone#1 data'
                    project 'test project#1 data'
                    credential 'mycred'
                  end

                  gcontainer_cluster 'title2' do
                    action :create
                    addons_config({
                      horizontal_pod_autoscaling: {
                        disabled: true
                      },
                      http_load_balancing: {
                        disabled: true
                      }
                    })
                    cluster_ipv4_cidr 'test cluster_ipv4_cidr#2 data'
                    description 'test description#2 data'
                    initial_node_count 5735018494
                    location ['cc', 'dd']
                    logging_service 'logging.googleapis.com'
                    master_auth({
                      client_certificate: 'test client_certificate#2 data',
                      client_key: 'test client_key#2 data',
                      cluster_ca_certificate: 'test cluster_ca_certificate#2 data',
                      password: 'test password#2 data',
                      username: 'test username#2 data'
                    })
                    monitoring_service 'monitoring.googleapis.com'
                    network 'test network#2 data'
                    node_config({
                      disk_size_gb: 1350276479,
                      image_type: 'test image_type#2 data',
                      labels: {
                        'test labels#3 data' => 'test labels#3 data',
                        'test labels#4 data' => 10218751724,
                        'test labels#5 data' => 'test labels#5 data',
                        'test labels#6 data' => 14306252413
                      },
                      local_ssd_count: 5253528053,
                      machine_type: 'test machine_type#2 data',
                      metadata: {
                        'test metadata#3 data' => 'test metadata#3 data',
                        'test metadata#4 data' => 4444525788,
                        'test metadata#5 data' => 'test metadata#5 data'
                      },
                      oauth_scopes: ['yy', 'zz'],
                      preemptible: true,
                      service_account: 'test service_account#2 data',
                      tags: ['qq', 'rr']
                    })
                    subnetwork 'test subnetwork#2 data'
                    zone 'test zone#2 data'
                    project 'test project#2 data'
                    credential 'mycred'
                  end
                MANIFEST
              ) do |recipe_name|
                runner.converge(recipe_name) do
                  cred = Google::CredentialResourceMock.new('mycred',
                                                            runner.run_context)
                  runner.resource_collection.insert(cred)
                end
              end
            end

            context 'gcontainer_cluster[title0]' do
              subject do
                chef_run.find_resource(:gcontainer_cluster, 'title0')
              end

              it { is_expected.to have_attributes(c_label: 'title0') }

              it do
                is_expected
                  .to have_attributes(description: 'test description#0 data')
              end

              it do
                is_expected
                  .to have_attributes(initial_node_count: 1_911_672_831)
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'nodeConfig' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'masterAuth' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(logging_service: 'logging.googleapis.com')
              end

              it do
                is_expected
                  .to have_attributes(
                    monitoring_service: 'monitoring.googleapis.com'
                  )
              end

              it do
                is_expected.to have_attributes(network: 'test network#0 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    cluster_ipv4_cidr: 'test cluster_ipv4_cidr#0 data'
                  )
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'addonsConfig' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(subnetwork: 'test subnetwork#0 data')
              end

              it { is_expected.to have_attributes(location: %w[qq rr ss tt]) }

              it { is_expected.to have_attributes(zone: 'test zone#0 data') }
            end

            context 'gcontainer_cluster[title1]' do
              subject do
                chef_run.find_resource(:gcontainer_cluster, 'title1')
              end

              it { is_expected.to have_attributes(c_label: 'title1') }

              it do
                is_expected
                  .to have_attributes(description: 'test description#1 data')
              end

              it do
                is_expected
                  .to have_attributes(initial_node_count: 3_823_345_662)
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'nodeConfig' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'masterAuth' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(logging_service: 'none') }

              it { is_expected.to have_attributes(monitoring_service: 'none') }

              it do
                is_expected.to have_attributes(network: 'test network#1 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    cluster_ipv4_cidr: 'test cluster_ipv4_cidr#1 data'
                  )
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'addonsConfig' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(subnetwork: 'test subnetwork#1 data')
              end

              it { is_expected.to have_attributes(location: %w[jj kk ll]) }

              it { is_expected.to have_attributes(zone: 'test zone#1 data') }
            end

            context 'gcontainer_cluster[title2]' do
              subject do
                chef_run.find_resource(:gcontainer_cluster, 'title2')
              end

              it { is_expected.to have_attributes(c_label: 'title2') }

              it do
                is_expected
                  .to have_attributes(description: 'test description#2 data')
              end

              it do
                is_expected
                  .to have_attributes(initial_node_count: 5_735_018_494)
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'nodeConfig' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'masterAuth' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(logging_service: 'logging.googleapis.com')
              end

              it do
                is_expected
                  .to have_attributes(
                    monitoring_service: 'monitoring.googleapis.com'
                  )
              end

              it do
                is_expected.to have_attributes(network: 'test network#2 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    cluster_ipv4_cidr: 'test cluster_ipv4_cidr#2 data'
                  )
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'addonsConfig' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(subnetwork: 'test subnetwork#2 data')
              end

              it { is_expected.to have_attributes(location: %w[cc dd]) }

              it { is_expected.to have_attributes(zone: 'test zone#2 data') }
            end
          end

          # Ensure present: resource exists, no change, no name, fail
          context 'title == name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, no change, has name
        context 'title != name' do
          # Ensure present: resource exists, no change, has name, pass
          context 'title != name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1
              expect_network_get_success 2
              expect_network_get_success 3
            end

            let(:runner) do
              # This path ensures that the current cookbook is
              # loaded for testing.
              # This path will load all other cookbooks in the
              # parent directory.
              # Under most circumstances, this will include the
              # real google-gauth cookbook.
              parent_dir = File.join(File.dirname(__FILE__), '..', '..')
              cookbook_paths = [parent_dir]

              # If there's no real version of the google-gauth ,
              # add in the mocked version so that the tests do not fail.
              # Since cookbooks can have any name, we assume that
              # any directory with the word auth is the google-gauth cookbook.
              if Dir.entries(parent_dir).select { |p| p.include? 'auth' }.empty?
                cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')
              end
              ChefSpec::SoloRunner.new(
                step_into: 'gcontainer_cluster',
                cookbook_path: cookbook_paths,
                platform: 'ubuntu',
                version: '16.04'
              )
            end

            let(:chef_run) do
              apply_recipe(
                <<-MANIFEST
                  gcontainer_cluster 'title0' do
                    action :create
                    addons_config({
                      horizontal_pod_autoscaling: {
                        disabled: true
                      },
                      http_load_balancing: {
                        disabled: true
                      }
                    })
                    c_label 'test name#0 data'
                    cluster_ipv4_cidr 'test cluster_ipv4_cidr#0 data'
                    description 'test description#0 data'
                    initial_node_count 1911672831
                    location ['qq', 'rr', 'ss', 'tt']
                    logging_service 'logging.googleapis.com'
                    master_auth({
                      client_certificate: 'test client_certificate#0 data',
                      client_key: 'test client_key#0 data',
                      cluster_ca_certificate: 'test cluster_ca_certificate#0 data',
                      password: 'test password#0 data',
                      username: 'test username#0 data'
                    })
                    monitoring_service 'monitoring.googleapis.com'
                    network 'test network#0 data'
                    node_config({
                      disk_size_gb: 450092159,
                      image_type: 'test image_type#0 data',
                      labels: {
                        'test labels#1 data' => 'test labels#1 data',
                        'test labels#2 data' => 6131251034
                      },
                      local_ssd_count: 1751176017,
                      machine_type: 'test machine_type#0 data',
                      metadata: {
                        'test metadata#1 data' => 'test metadata#1 data',
                        'test metadata#2 data' => 2666715473,
                        'test metadata#3 data' => 'test metadata#3 data'
                      },
                      oauth_scopes: ['ww', 'xx', 'yy', 'zz'],
                      preemptible: true,
                      service_account: 'test service_account#0 data',
                      tags: ['mm', 'nn', 'oo', 'pp']
                    })
                    subnetwork 'test subnetwork#0 data'
                    zone 'test zone#0 data'
                    project 'test project#0 data'
                    credential 'mycred'
                  end

                  gcontainer_cluster 'title1' do
                    action :create
                    addons_config({
                      horizontal_pod_autoscaling: {
                        disabled: false
                      },
                      http_load_balancing: {
                        disabled: false
                      }
                    })
                    c_label 'test name#1 data'
                    cluster_ipv4_cidr 'test cluster_ipv4_cidr#1 data'
                    description 'test description#1 data'
                    initial_node_count 3823345662
                    location ['jj', 'kk', 'll']
                    logging_service 'none'
                    master_auth({
                      client_certificate: 'test client_certificate#1 data',
                      client_key: 'test client_key#1 data',
                      cluster_ca_certificate: 'test cluster_ca_certificate#1 data',
                      password: 'test password#1 data',
                      username: 'test username#1 data'
                    })
                    monitoring_service 'none'
                    network 'test network#1 data'
                    node_config({
                      disk_size_gb: 900184319,
                      image_type: 'test image_type#1 data',
                      labels: {
                        'test labels#2 data' => 'test labels#2 data',
                        'test labels#3 data' => 8175001379,
                        'test labels#4 data' => 'test labels#4 data'
                      },
                      local_ssd_count: 3502352035,
                      machine_type: 'test machine_type#1 data',
                      metadata: {
                        'test metadata#2 data' => 'test metadata#2 data',
                        'test metadata#3 data' => 3555620630,
                        'test metadata#4 data' => 'test metadata#4 data',
                        'test metadata#5 data' => 5333430946,
                        'test metadata#6 data' => 'test metadata#6 data'
                      },
                      oauth_scopes: ['xx', 'yy', 'zz'],
                      preemptible: false,
                      service_account: 'test service_account#1 data',
                      tags: ['bb', 'cc', 'dd']
                    })
                    subnetwork 'test subnetwork#1 data'
                    zone 'test zone#1 data'
                    project 'test project#1 data'
                    credential 'mycred'
                  end

                  gcontainer_cluster 'title2' do
                    action :create
                    addons_config({
                      horizontal_pod_autoscaling: {
                        disabled: true
                      },
                      http_load_balancing: {
                        disabled: true
                      }
                    })
                    c_label 'test name#2 data'
                    cluster_ipv4_cidr 'test cluster_ipv4_cidr#2 data'
                    description 'test description#2 data'
                    initial_node_count 5735018494
                    location ['cc', 'dd']
                    logging_service 'logging.googleapis.com'
                    master_auth({
                      client_certificate: 'test client_certificate#2 data',
                      client_key: 'test client_key#2 data',
                      cluster_ca_certificate: 'test cluster_ca_certificate#2 data',
                      password: 'test password#2 data',
                      username: 'test username#2 data'
                    })
                    monitoring_service 'monitoring.googleapis.com'
                    network 'test network#2 data'
                    node_config({
                      disk_size_gb: 1350276479,
                      image_type: 'test image_type#2 data',
                      labels: {
                        'test labels#3 data' => 'test labels#3 data',
                        'test labels#4 data' => 10218751724,
                        'test labels#5 data' => 'test labels#5 data',
                        'test labels#6 data' => 14306252413
                      },
                      local_ssd_count: 5253528053,
                      machine_type: 'test machine_type#2 data',
                      metadata: {
                        'test metadata#3 data' => 'test metadata#3 data',
                        'test metadata#4 data' => 4444525788,
                        'test metadata#5 data' => 'test metadata#5 data'
                      },
                      oauth_scopes: ['yy', 'zz'],
                      preemptible: true,
                      service_account: 'test service_account#2 data',
                      tags: ['qq', 'rr']
                    })
                    subnetwork 'test subnetwork#2 data'
                    zone 'test zone#2 data'
                    project 'test project#2 data'
                    credential 'mycred'
                  end
                MANIFEST
              ) do |recipe_name|
                runner.converge(recipe_name) do
                  cred = Google::CredentialResourceMock.new('mycred',
                                                            runner.run_context)
                  runner.resource_collection.insert(cred)
                end
              end
            end

            context 'gcontainer_cluster[title0]' do
              subject do
                chef_run.find_resource(:gcontainer_cluster, 'title0')
              end

              it { is_expected.to have_attributes(c_label: 'test name#0 data') }

              it do
                is_expected
                  .to have_attributes(description: 'test description#0 data')
              end

              it do
                is_expected
                  .to have_attributes(initial_node_count: 1_911_672_831)
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'nodeConfig' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'masterAuth' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(logging_service: 'logging.googleapis.com')
              end

              it do
                is_expected
                  .to have_attributes(
                    monitoring_service: 'monitoring.googleapis.com'
                  )
              end

              it do
                is_expected.to have_attributes(network: 'test network#0 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    cluster_ipv4_cidr: 'test cluster_ipv4_cidr#0 data'
                  )
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'addonsConfig' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(subnetwork: 'test subnetwork#0 data')
              end

              it { is_expected.to have_attributes(location: %w[qq rr ss tt]) }

              it { is_expected.to have_attributes(zone: 'test zone#0 data') }
            end

            context 'gcontainer_cluster[title1]' do
              subject do
                chef_run.find_resource(:gcontainer_cluster, 'title1')
              end

              it { is_expected.to have_attributes(c_label: 'test name#1 data') }

              it do
                is_expected
                  .to have_attributes(description: 'test description#1 data')
              end

              it do
                is_expected
                  .to have_attributes(initial_node_count: 3_823_345_662)
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'nodeConfig' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'masterAuth' do
              #   # Add test code here
              # end

              it { is_expected.to have_attributes(logging_service: 'none') }

              it { is_expected.to have_attributes(monitoring_service: 'none') }

              it do
                is_expected.to have_attributes(network: 'test network#1 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    cluster_ipv4_cidr: 'test cluster_ipv4_cidr#1 data'
                  )
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'addonsConfig' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(subnetwork: 'test subnetwork#1 data')
              end

              it { is_expected.to have_attributes(location: %w[jj kk ll]) }

              it { is_expected.to have_attributes(zone: 'test zone#1 data') }
            end

            context 'gcontainer_cluster[title2]' do
              subject do
                chef_run.find_resource(:gcontainer_cluster, 'title2')
              end

              it { is_expected.to have_attributes(c_label: 'test name#2 data') }

              it do
                is_expected
                  .to have_attributes(description: 'test description#2 data')
              end

              it do
                is_expected
                  .to have_attributes(initial_node_count: 5_735_018_494)
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'nodeConfig' do
              #   # Add test code here
              # end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'masterAuth' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(logging_service: 'logging.googleapis.com')
              end

              it do
                is_expected
                  .to have_attributes(
                    monitoring_service: 'monitoring.googleapis.com'
                  )
              end

              it do
                is_expected.to have_attributes(network: 'test network#2 data')
              end

              it do
                is_expected
                  .to have_attributes(
                    cluster_ipv4_cidr: 'test cluster_ipv4_cidr#2 data'
                  )
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'addonsConfig' do
              #   # Add test code here
              # end

              it do
                is_expected
                  .to have_attributes(subnetwork: 'test subnetwork#2 data')
              end

              it { is_expected.to have_attributes(location: %w[cc dd]) }

              it { is_expected.to have_attributes(zone: 'test zone#2 data') }
            end
          end

          # Ensure present: resource exists, no change, has name, fail
          context 'title != name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end

      # Ensure present: resource exists, changes
      context 'changes == action' do
        # Ensure present: resource exists, changes, no name
        context 'title == name' do
          # Ensure present: resource exists, changes, no name, pass
          context 'title == name (pass)' do
            # TODO(alexstephen): Implement new test format.
          end

          # Ensure present: resource exists, changes, no name, fail
          context 'title == name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, changes, has name
        context 'title != name' do
          # Ensure present: resource exists, changes, has name, pass
          context 'title != name (pass)' do
            # TODO(alexstephen): Implement new test format
          end

          # Ensure present: resource exists, changes, has name, fail
          context 'title != name (fail)' do
            # TODO(alexstephen): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end
    end

    context 'resource missing' do
      # Ensure present: resource missing, ignore, no name
      context 'title == name' do
        # Ensure present: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before do
            # rubocop:disable Metrics/LineLength
            expect_network_get_failed 1, name: 'title0'
            expect_network_create \
              1,
              {
                'name' => 'title0',
                'description' => 'test description#0 data',
                'initialNodeCount' => 1_911_672_831,
                'nodeConfig' => {
                  'machineType' => 'test machine_type#0 data',
                  'diskSizeGb' => 450_092_159,
                  'oauthScopes' => %w[ww xx yy zz],
                  'serviceAccount' => 'test service_account#0 data',
                  'metadata' => {
                    'test metadata#1 data' => 'test metadata#1 data',
                    'test metadata#2 data' => 2_666_715_473,
                    'test metadata#3 data' => 'test metadata#3 data'
                  },
                  'imageType' => 'test image_type#0 data',
                  'labels' => {
                    'test labels#1 data' => 'test labels#1 data',
                    'test labels#2 data' => 6_131_251_034
                  },
                  'localSsdCount' => 1_751_176_017,
                  'tags' => %w[mm nn oo pp],
                  'preemptible' => true
                },
                'masterAuth' => {
                  'username' => 'test username#0 data',
                  'password' => 'test password#0 data',
                  'clusterCaCertificate' => 'test cluster_ca_certificate#0 data',
                  'clientCertificate' => 'test client_certificate#0 data',
                  'clientKey' => 'test client_key#0 data'
                },
                'loggingService' => 'logging.googleapis.com',
                'monitoringService' => 'monitoring.googleapis.com',
                'network' => 'test network#0 data',
                'clusterIpv4Cidr' => 'test cluster_ipv4_cidr#0 data',
                'addonsConfig' => {
                  'httpLoadBalancing' => {
                    'disabled' => true
                  },
                  'horizontalPodAutoscaling' => {
                    'disabled' => true
                  }
                },
                'subnetwork' => 'test subnetwork#0 data',
                'location' => %w[qq rr ss tt]
              },
              name: 'title0'
            expect_network_get_async 1, name: 'title0'
            # rubocop:enable Metrics/LineLength
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            if Dir.entries(parent_dir).select { |p| p.include? 'auth' }.empty?
              cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')
            end
            ChefSpec::SoloRunner.new(
              step_into: 'gcontainer_cluster',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcontainer_cluster 'title0' do
                  action :create
                  addons_config({
                    horizontal_pod_autoscaling: {
                      disabled: true
                    },
                    http_load_balancing: {
                      disabled: true
                    }
                  })
                  cluster_ipv4_cidr 'test cluster_ipv4_cidr#0 data'
                  description 'test description#0 data'
                  initial_node_count 1911672831
                  location ['qq', 'rr', 'ss', 'tt']
                  logging_service 'logging.googleapis.com'
                  master_auth({
                    client_certificate: 'test client_certificate#0 data',
                    client_key: 'test client_key#0 data',
                    cluster_ca_certificate: 'test cluster_ca_certificate#0 data',
                    password: 'test password#0 data',
                    username: 'test username#0 data'
                  })
                  monitoring_service 'monitoring.googleapis.com'
                  network 'test network#0 data'
                  node_config({
                    disk_size_gb: 450092159,
                    image_type: 'test image_type#0 data',
                    labels: {
                      'test labels#1 data' => 'test labels#1 data',
                      'test labels#2 data' => 6131251034
                    },
                    local_ssd_count: 1751176017,
                    machine_type: 'test machine_type#0 data',
                    metadata: {
                      'test metadata#1 data' => 'test metadata#1 data',
                      'test metadata#2 data' => 2666715473,
                      'test metadata#3 data' => 'test metadata#3 data'
                    },
                    oauth_scopes: ['ww', 'xx', 'yy', 'zz'],
                    preemptible: true,
                    service_account: 'test service_account#0 data',
                    tags: ['mm', 'nn', 'oo', 'pp']
                  })
                  subnetwork 'test subnetwork#0 data'
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcontainer_cluster, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to create(:gcontainer_cluster,
                                       'title0')
          end
          it { is_expected.to have_attributes(c_label: 'title0') }

          it do
            is_expected
              .to have_attributes(description: 'test description#0 data')
          end

          it do
            is_expected.to have_attributes(initial_node_count: 1_911_672_831)
          end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'nodeConfig' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'masterAuth' do
          #   # Add test code here
          # end

          it do
            is_expected
              .to have_attributes(logging_service: 'logging.googleapis.com')
          end

          it do
            is_expected
              .to have_attributes(
                monitoring_service: 'monitoring.googleapis.com'
              )
          end

          it { is_expected.to have_attributes(network: 'test network#0 data') }

          it do
            is_expected
              .to have_attributes(
                cluster_ipv4_cidr: 'test cluster_ipv4_cidr#0 data'
              )
          end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'addonsConfig' do
          #   # Add test code here
          # end

          it do
            is_expected.to have_attributes(subnetwork: 'test subnetwork#0 data')
          end

          it { is_expected.to have_attributes(location: %w[qq rr ss tt]) }

          it { is_expected.to have_attributes(zone: 'test zone#0 data') }
        end

        # Ensure present: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure present: resource missing, ignore, has name
      context 'title != name' do
        # Ensure present: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before do
            expect_network_get_failed 1
            expect_network_create \
              1,
              'name' => 'test name#0 data',
              'description' => 'test description#0 data',
              'initialNodeCount' => 1_911_672_831,
              'nodeConfig' => {
                'machineType' => 'test machine_type#0 data',
                'diskSizeGb' => 450_092_159,
                'oauthScopes' => %w[ww xx yy zz],
                'serviceAccount' => 'test service_account#0 data',
                'metadata' => {
                  'test metadata#1 data' => 'test metadata#1 data',
                  'test metadata#2 data' => 2_666_715_473,
                  'test metadata#3 data' => 'test metadata#3 data'
                },
                'imageType' => 'test image_type#0 data',
                'labels' => {
                  'test labels#1 data' => 'test labels#1 data',
                  'test labels#2 data' => 6_131_251_034
                },
                'localSsdCount' => 1_751_176_017,
                'tags' => %w[mm nn oo pp],
                'preemptible' => true
              },
              'masterAuth' => {
                'username' => 'test username#0 data',
                'password' => 'test password#0 data',
                'clusterCaCertificate' => 'test cluster_ca_certificate#0 data',
                'clientCertificate' => 'test client_certificate#0 data',
                'clientKey' => 'test client_key#0 data'
              },
              'loggingService' => 'logging.googleapis.com',
              'monitoringService' => 'monitoring.googleapis.com',
              'network' => 'test network#0 data',
              'clusterIpv4Cidr' => 'test cluster_ipv4_cidr#0 data',
              'addonsConfig' => {
                'httpLoadBalancing' => {
                  'disabled' => true
                },
                'horizontalPodAutoscaling' => {
                  'disabled' => true
                }
              },
              'subnetwork' => 'test subnetwork#0 data',
              'location' => %w[qq rr ss tt]
            expect_network_get_async 1
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            if Dir.entries(parent_dir).select { |p| p.include? 'auth' }.empty?
              cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')
            end
            ChefSpec::SoloRunner.new(
              step_into: 'gcontainer_cluster',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcontainer_cluster 'title0' do
                  action :create
                  addons_config({
                    horizontal_pod_autoscaling: {
                      disabled: true
                    },
                    http_load_balancing: {
                      disabled: true
                    }
                  })
                  c_label 'test name#0 data'
                  cluster_ipv4_cidr 'test cluster_ipv4_cidr#0 data'
                  description 'test description#0 data'
                  initial_node_count 1911672831
                  location ['qq', 'rr', 'ss', 'tt']
                  logging_service 'logging.googleapis.com'
                  master_auth({
                    client_certificate: 'test client_certificate#0 data',
                    client_key: 'test client_key#0 data',
                    cluster_ca_certificate: 'test cluster_ca_certificate#0 data',
                    password: 'test password#0 data',
                    username: 'test username#0 data'
                  })
                  monitoring_service 'monitoring.googleapis.com'
                  network 'test network#0 data'
                  node_config({
                    disk_size_gb: 450092159,
                    image_type: 'test image_type#0 data',
                    labels: {
                      'test labels#1 data' => 'test labels#1 data',
                      'test labels#2 data' => 6131251034
                    },
                    local_ssd_count: 1751176017,
                    machine_type: 'test machine_type#0 data',
                    metadata: {
                      'test metadata#1 data' => 'test metadata#1 data',
                      'test metadata#2 data' => 2666715473,
                      'test metadata#3 data' => 'test metadata#3 data'
                    },
                    oauth_scopes: ['ww', 'xx', 'yy', 'zz'],
                    preemptible: true,
                    service_account: 'test service_account#0 data',
                    tags: ['mm', 'nn', 'oo', 'pp']
                  })
                  subnetwork 'test subnetwork#0 data'
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcontainer_cluster, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to create(:gcontainer_cluster,
                                       'title0')
          end
          it { is_expected.to have_attributes(c_label: 'test name#0 data') }

          it do
            is_expected
              .to have_attributes(description: 'test description#0 data')
          end

          it do
            is_expected.to have_attributes(initial_node_count: 1_911_672_831)
          end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'nodeConfig' do
          #   # Add test code here
          # end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'masterAuth' do
          #   # Add test code here
          # end

          it do
            is_expected
              .to have_attributes(logging_service: 'logging.googleapis.com')
          end

          it do
            is_expected
              .to have_attributes(
                monitoring_service: 'monitoring.googleapis.com'
              )
          end

          it { is_expected.to have_attributes(network: 'test network#0 data') }

          it do
            is_expected
              .to have_attributes(
                cluster_ipv4_cidr: 'test cluster_ipv4_cidr#0 data'
              )
          end

          # TODO(nelsonjr): Implement complex nested property object test.
          # it 'addonsConfig' do
          #   # Add test code here
          # end

          it do
            is_expected.to have_attributes(subnetwork: 'test subnetwork#0 data')
          end

          it { is_expected.to have_attributes(location: %w[qq rr ss tt]) }

          it { is_expected.to have_attributes(zone: 'test zone#0 data') }
        end

        # Ensure present: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context 'ensure == absent' do
    context 'resource missing' do
      # Ensure absent: resource missing, ignore, no name
      context 'title == name' do
        # Ensure absent: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before do
            expect_network_get_failed 1, name: 'title0'
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            if Dir.entries(parent_dir).select { |p| p.include? 'auth' }.empty?
              cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')
            end
            ChefSpec::SoloRunner.new(
              step_into: 'gcontainer_cluster',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcontainer_cluster 'title0' do
                  action :delete
                  initial_node_count 1911672831
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcontainer_cluster, 'title0')
          end
        end

        # Ensure absent: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource missing, ignore, has name
      context 'title != name' do
        # Ensure absent: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before do
            expect_network_get_failed 1
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            if Dir.entries(parent_dir).select { |p| p.include? 'auth' }.empty?
              cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')
            end
            ChefSpec::SoloRunner.new(
              step_into: 'gcontainer_cluster',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcontainer_cluster 'title0' do
                  action :delete
                  c_label 'test name#0 data'
                  initial_node_count 1911672831
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcontainer_cluster, 'title0')
          end
        end

        # Ensure absent: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end

    context 'resource exists' do
      # Ensure absent: resource exists, ignore, no name
      context 'title == name' do
        # Ensure absent: resource exists, ignore, no name, pass
        context 'title == name (pass)' do
          before do
            expect_network_get_success 1, name: 'title0'
            expect_network_delete 1, 'title0'
            expect_network_get_async 1, name: 'title0'
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            if Dir.entries(parent_dir).select { |p| p.include? 'auth' }.empty?
              cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')
            end
            ChefSpec::SoloRunner.new(
              step_into: 'gcontainer_cluster',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcontainer_cluster 'title0' do
                  action :delete
                  initial_node_count 1911672831
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcontainer_cluster, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to delete(:gcontainer_cluster,
                                       'title0')
          end
        end

        # Ensure absent: resource exists, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
      # Ensure absent: resource exists, ignore, has name
      context 'title != name' do
        # Ensure absent: resource exists, ignore, has name, pass
        context 'title != name (pass)' do
          before do
            expect_network_get_success 1
            expect_network_delete 1
            expect_network_get_async 1
          end

          let(:runner) do
            # This path ensures that the current cookbook is
            # loaded for testing.
            # This path will load all other cookbooks in the
            # parent directory.
            # Under most circumstances, this will include the
            # real google-gauth cookbook.
            parent_dir = File.join(File.dirname(__FILE__), '..', '..')
            cookbook_paths = [parent_dir]

            # If there's no real version of the google-gauth ,
            # add in the mocked version so that the tests do not fail.
            # Since cookbooks can have any name, we assume that
            # any directory with the word auth is the google-gauth cookbook.
            if Dir.entries(parent_dir).select { |p| p.include? 'auth' }.empty?
              cookbook_paths << File.join(File.dirname(__FILE__), 'cookbooks')
            end
            ChefSpec::SoloRunner.new(
              step_into: 'gcontainer_cluster',
              cookbook_path: cookbook_paths,
              platform: 'ubuntu',
              version: '16.04'
            )
          end

          let(:chef_run) do
            apply_recipe(
              <<-MANIFEST
                gcontainer_cluster 'title0' do
                  action :delete
                  c_label 'test name#0 data'
                  initial_node_count 1911672831
                  zone 'test zone#0 data'
                  project 'test project#0 data'
                  credential 'mycred'
                end
              MANIFEST
            ) do |recipe_name|
              runner.converge(recipe_name) do
                cred = Google::CredentialResourceMock.new('mycred',
                                                          runner.run_context)
                runner.resource_collection.insert(cred)
              end
            end
          end

          subject do
            chef_run.find_resource(:gcontainer_cluster, 'title0')
          end

          it 'should run test correctly' do
            expect(chef_run).to delete(:gcontainer_cluster,
                                       'title0')
          end
        end

        # Ensure absent: resource exists, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(alexstephen): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  def expand_variables(template, data, extra_data = {})
    Google::GCONTAINER::Cluster
      .action_class.expand_variables(template, data, extra_data)
  end

  def encode_request(resource)
    Google::GCONTAINER::Cluster
      .action_class.encode_request(resource)
  end

  def expect_network_get_success(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result("success#{id}~#{id_data}.yaml").to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{self_link(uri_data(id).merge(data))}"
    expect(Google::Container::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def http_success(body)
    response = Net::HTTPOK.new(1.0, 200, 'OK')
    response.body = body
    response.instance_variable_set(:@read, true)
    response
  end

  def expect_network_get_async(id, data = {})
    body = {}.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Container::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET <async> #{args}"
      request
    end
  end

  def expect_network_get_failed(id, data = {})
    request = double('request')
    allow(request).to receive(:send).and_return(http_failed_object_missing)

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Container::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET [failed] #{args}"
      request
    end
  end

  def http_failed_object_missing
    Net::HTTPNotFound.new(1.0, 404, 'Not Found')
  end

  def expect_network_create(id, expected_body, data = {})
    merged_uri = uri_data(id).merge(data)
    body = { kind: 'container#operation',
             status: 'DONE', targetLink: self_link(merged_uri) }.to_json

    # Encode the object to conform with the API
    expected_body = encode_request(expected_body)
    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! POST #{collection(merged_uri)}"
    expect(Google::Container::Network::Post).to receive(:new)
      .with(collection(merged_uri), instance_of(Google::FakeAuthorization),
            'application/json', expected_body.to_json) do |args|
      debug_network ">> POST #{args} = body(#{body})"
      request
    end
  end

  def expect_network_delete(id, name = nil, data = {})
    delete_data = uri_data(id).merge(data)
    delete_data[:name] = name unless name.nil?
    body = { kind: 'container#operation',
             status: 'DONE',
             targetLink: self_link(delete_data) }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! DELETE #{self_link(delete_data)}"
    expect(Google::Container::Network::Delete).to receive(:new)
      .with(self_link(delete_data),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> DELETE #{args}"
      request
    end
  end

  def load_network_result(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcontainer_cluster', file)
    debug("Loading result file: #{results}")
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  def debug(message)
    puts(message) if ENV['RSPEC_DEBUG']
  end

  def debug_network(message)
    puts("Network #{message}") \
      if ENV['RSPEC_DEBUG'] || ENV['RSPEC_HTTP_VERBOSE']
  end

  def collection(data)
    URI.join(
      'https://container.googleapis.com/v1/',
      expand_variables(
        'projects/{{project}}/zones/{{zone}}/clusters',
        data
      )
    )
  end

  def self_link(data)
    URI.join(
      'https://container.googleapis.com/v1/',
      expand_variables(
        'projects/{{project}}/zones/{{zone}}/clusters/{{name}}',
        data
      )
    )
  end

  # Creates variable test data to comply with self_link URI parameters
  def uri_data(id)
    {
      project: GoogleTests::Constants::C_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::C_PROJECT_DATA.size],
      zone: GoogleTests::Constants::C_ZONE_DATA[(id - 1) \
        % GoogleTests::Constants::C_ZONE_DATA.size],
      name: GoogleTests::Constants::C_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::C_NAME_DATA.size]
    }
  end

  def build_cred
    <<-CRED
    gauth_credential 'mycred' do
      action :serviceaccount
      path '/home'
      scopes [
        'test_path'
      ]
    end
    CRED
  end

  # Creates a test recipe file and runs a block before destroying the file
  def apply_recipe(recipe)
    # Creates a random string name
    recipe_name = "recipe~test~#{(0...8).map { (65 + rand(26)).chr }.join}"
    recipe_loc = File.join(File.dirname(__FILE__), '..', 'recipes',
                           "#{recipe_name}.rb")

    File.open(recipe_loc, 'w') do |file|
      file.write([build_cred, recipe].join("\n"))
    end
    recipe_path = "google-gcontainer::#{recipe_name}"
    begin
      yield recipe_path
    ensure
      File.delete(recipe_loc)
    end
  end
end
